
    union Val switch(long) {
      case 0:
        string str;
      case 1:
        long dec;
      case 2:
        float fl;
      case 3:
        sequence<float>  float_vec;
      case 4:
        boolean bl;
      case 5:
        sequence<octet> byte_vec;
      case 6:
        unsigned long uint;
      case 7:
        unsigned long long u64;
      case 8:
        double dob;
      case 9:
        sequence<unsigned long long> uint64_vec;
      case 10:
        float vec_float2[2];
      case 11:
        float vec_float3[3];
      case 12:
        float vec_float4[4];
      case 13:
        float vec_float6[6];
    };

    enum Types
    {
        _STRING,
        _INT,
        _FLOAT,
        _FLOAT_VEC,
        _BOOL,
        _BYTE_VEC,
        _UINT,
        _UINT64,
        _DOUBLE,
        _UINT64_VEC,
        _VEC_FLOAT2,
        _VEC_FLOAT3,
        _VEC_FLOAT4,
        _VEC_FLOAT6
    };


    struct _Attrib
    {
        unsigned long type;
        Val value;
        unsigned long long timestamp;
        unsigned long agent_id;
    };

    struct PairInt {
        unsigned long long first;
        long second;
    };

    struct DotContext {
        map<unsigned long long, long> cc;
        sequence<PairInt> dc;
    };

    struct DotKernelAttr {
        map<PairInt, Attrib> ds;
        DotContext cbase;
    };

    struct MvregEdgeAttr {
        unsigned long long id;
        unsigned long long from;
        unsigned long long to;
        string type;
        string attr_name; // We need it for remove deltas.
        DotKernelAttr dk;
        unsigned long agent_id; // to skip messages from the same agent in multithreading.
        unsigned long long timestamp;
    };

    struct IDLEdge {
        unsigned long long to; //key1
		string type; //key2
		unsigned long long from; // Se mantiene para trabajar más fácilmente con los Edges.
		map<string, MvregEdgeAttr>    attrs;
		unsigned long agent_id;
	};

    struct EdgeKey {
        unsigned long long to;
        string type;
    };

    struct MvregNodeAttr {
        unsigned long long id;
        unsigned long long node;
        string attr_name; // We need it for remove deltas.
        DotKernelAttr dk;
        unsigned long agent_id; // to skip messages from the same agent in multithreading.
        unsigned long long timestamp;
    };


    struct DotKernelEdge {
        map<PairInt, IDLEdge> ds;
        DotContext cbase;
    };

    struct MvregEdge {
        unsigned long long id;
        unsigned long long from;
        unsigned long long to;
        string type;
        DotKernelEdge dk;
        unsigned long agent_id; // to skip messages from the same agent in multithread.
        unsigned long long timestamp;
    };


    struct IDLNode {
        string type;
        string name;
        unsigned long long id;
        unsigned long agent_id;
		    map<string, MvregNodeAttr>   attrs;
		    map<EdgeKey, MvregEdge> fano;
    };

    struct GraphRequest
    {
        string from;
        long id;
    };

    struct DotKernel {
        map<PairInt, IDLNode> ds;
        DotContext cbase;
    };

    struct MvregNode {
        unsigned long long id;
        DotKernel dk;
        unsigned long agent_id; // to skip messages from the same agent in multithreading.
        unsigned long long timestamp;
    };

    struct OrMap {
        unsigned long to_id; //Used to check if a message with -1 m_id is for this agent.
        unsigned long id;
        map<unsigned long long, MvregNode> m;
        DotContext cbase;
    };


    struct MvregEdgeAttrVec {
    	sequence<MvregEdgeAttr> vec;
    };
    
    struct MvregNodeAttrVec {
    	sequence<MvregNodeAttr> vec;
    };



