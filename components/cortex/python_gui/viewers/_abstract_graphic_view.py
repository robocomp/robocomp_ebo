from abc import ABCMeta, ABC

from PySide2.QtCore import Qt, QEventLoop
from PySide2.QtGui import QPainter, QCursor
from PySide2.QtWidgets import QGraphicsView, QGraphicsScene, QWidget, QApplication


class QABCMeta(ABCMeta, type(QWidget)):
    """Create a meta class that combines ABC and the Qt meta class"""
    pass


class TcWidget(ABC, metaclass=QABCMeta):
    """Abstract class, to be multi-inherited together with a Qt item"""
    pass


class AbstractGraphicViewer(QGraphicsView, TcWidget):
    def __init__(self, parent=None):
        """
        Sets up a `AbstractGraphicViewer` object by initializing its properties,
        scene, cache mode, viewport update mode, antialiasing, and mouse tracking.

        Args:
            parent (str): parent widget of the `AbstractGraphicViewer` class, which
                is used to initialize and set the scene and other properties of
                the view.

        """
        super(AbstractGraphicViewer, self).__init__(parent)
        self.m_scaleX = 0
        self.m_scaleY = 0
        self._pan = False
        self._panStartX = 0
        self._panStartY = 0
        self.scene = QGraphicsScene()
        self.scene.setItemIndexMethod(QGraphicsScene.NoIndex)
        self.scene.setSceneRect(-2000, -2000, 4000, 4000)
        self.setScene(self.scene)
        self.setCacheMode(QGraphicsView.CacheBackground)
        self.setViewportUpdateMode(QGraphicsView.BoundingRectViewportUpdate)
        self.setRenderHint(QPainter.Antialiasing)
        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        self.setMinimumSize(400, 400)
        self.adjustSize()
        self.setMouseTracking(True)
        self.viewport().setMouseTracking(True)

    def wheelEvent(self, event):
        """
        Modifies the size and position of an object based on the y-axis value of
        a mouse wheel event.

        Args:
            event (angle, velocity, or position.): 2D motion event that is passed
                to the function, providing information about the position and
                orientation of the device or user's input.
                
                		- `angleDelta().y()` returns the y-coordinate of the angle delta
                in radians. If the angle delta is positive, the value is greater
                than zero, and vice versa. This is used to determine the scaling
                factor for the view.
                		- `view_pos` is the position of the view in screen coordinates.
                It is deserialized from the `event` object.
                		- `scene_pos` is the position of the scene node in world
                coordinates, obtained by applying the view's transformation matrix
                to the view_pos. This is also deserialized from the `event` object.
                		- `factor` is a floating-point value that represents the scaling
                factor for the view. It is set to 1.1 if the angle delta is positive
                and to 0.9 otherwise.
                		- `delta` is the distance between the current position of the
                viewport rectangle's center and the position of the scene node in
                world coordinates. This is calculated by subtracting the viewport's
                center from the scene node's position.
                
                	In conclusion, this function processes the mouse wheel event and
                adjusts the scaling factor for the view based on the angle of the
                wheel rotation, while also centering the view on the current
                position of the scene node.

        """
        if event.angleDelta().y() > 0:
            factor = 1.1
        else:
            factor = 0.9
        view_pos = event.pos()
        scene_pos = self.mapToScene(view_pos)
        self.centerOn(scene_pos)
        self.scale(factor, factor)
        delta = self.mapToScene(view_pos) - self.mapToScene(self.viewport().rect().center())
        self.centerOn(scene_pos - delta)

    def resizeEvent(self, event):
        super(AbstractGraphicViewer, self).resizeEvent(event)

    def mouseMoveEvent(self, event):
        """
        Updates the position of the pan widget by subtracting the distance from
        the current mouse position to the start position of the pan widget.

        Args:
            event (`QMouseEvent`.): MouseEvent object generated by the user's mouse
                move event and provides the coordinates of the mouse position
                within the viewer's scroll bars.
                
                		- `x`: The x-coordinate of the mouse event (float).
                		- `y`: The y-coordinate of the mouse event (float).

        """
        if self._pan:
            self.horizontalScrollBar().setValue(self.horizontalScrollBar().value() - (event.x() - self._panStartX))
            self.verticalScrollBar().setValue(self.verticalScrollBar().value() - (event.y() - self._panStartY))
            self._panStartX = event.x()
            self._panStartY = event.y()
            event.accept()
        super(AbstractGraphicViewer, self).mouseMoveEvent(event)

    def mousePressEvent(self, event):
        """
        Of the `AbstractGraphicViewer` class is triggered when the user presses a
        mouse button on the graphic viewer. It sets `_pan` and `_panStartX,
        _panStartY` variables to indicate the position where the user pressed the
        button. The cursor is set to a closed hand cursor, and the event is accepted
        and passed to the superclass for further handling.

        Args:
            event (`QMouseEvent`.): mouse press event that is being handled by the
                function.
                
                		- `button()`: This property returns the button that was pressed,
                with values corresponding to the `Qt.LeftButton`, ` Qt.MiddleButton`,
                `Qt.RightButton`, and `Qt.NoButton`. The input `event.button()`
                is equal to `Qt.LeftButton` in this case.
                		- `x()` and `y()`: These properties return the coordinates of
                the press event in the widget's coordinate system, denoted by (`x`,
                `y`). The input `event.x()` and `event.y()` are used to set the
                `_panStartX` and `_panStartY` instance variables, respectively.

        """
        if event.button() == Qt.LeftButton:
            self._pan = True
            self._panStartX = event.x()
            self._panStartY = event.y()
            self.setCursor(QCursor.ClosedHandCursor)
            event.accept()
            return
        super(AbstractGraphicViewer, self).mousePressEvent(event)

    def mouseReleaseEvent(self, event):
        """
        Updates the mouse state and passes the event to the parent class for further
        processing.

        Args:
            event (`QMouseEvent`.): mouse release event that is being handled by
                the `mouseReleaseEvent()` method of the `AbstractGraphicViewer` class.
                
                		- `button()` returns the mouse button that was released (in this
                case, `Qt.LeftButton`).
                		- `accept()` is a method that confirms that the event has been
                processed and can be further propagated up the event handling hierarchy.
                
                	Superclasses are notated as `super` followed by the class name,
                indicating that the inherited methods from the superclass are being
                called.

        """
        if event.button() == Qt.LeftButton:
            self._pan = False
            self.setCursor(QCursor.ArrowCursor)
            event.accept()
        super(AbstractGraphicViewer, self).mouseReleaseEvent(event)

    def showEvent(self, event):
        """
        Adjusts the scene rect based on the items bounding rectangle and fits the
        view to the updated rectangle using the `fitInView` method twice with
        different parameters to handle potential bugs related to updates enabled
        state.

        Args:
            event (`QEvent`.): 2D event that triggered the function's execution,
                and it is used to adjust the scene rect and fit the graphical
                viewer within the viewport.
                
                		- `event`: The input event passed to the `showEvent` function.
                Its exact properties and attributes may vary depending on the type
                of event.
                
                	Note: The provided code snippet does not include any explicit
                casting or handling of events, so it is important to consult the
                documentation for the specific event class and handle accordingly
                in your code.

        """
        super(AbstractGraphicViewer, self).showEvent(event)
        adjusted = self.scene.itemsBoundingRect().adjusted(-100, -100, 100, 100)
        self.scene.setSceneRect(adjusted)
        # FitInView is called two times because of this bug: https://bugreports.qt.io/browse/QTBUG-1047
        update_state = self.updatesEnabled()
        self.setUpdatesEnabled(False)
        self.fitInView(adjusted, Qt.KeepAspectRatio)
        QApplication.processEvents(QEventLoop.ExcludeUserInputEvents)
        self.fitInView(adjusted, Qt.KeepAspectRatio)
        self.setUpdatesEnabled(update_state)
