fontName=Arial
fontSize=14
lineThickness=2.0
longPattern=3
name=change_room
nodeThickness=2.0
shortPattern=1
spacePattern=3
vertexDiameter=40.0
===
types
{
(person)
(robot)
(room)
}
===
askForGroupalPermission : active(1)
{
	{
		p:person(-70,-245)
		p2:person(115,10)
		robot:robot(-195,55)
		p->p2(interacting)
		p->robot(is_blocking)
		p2->p(interacting)
		p2->robot(is_blocking)
		robot->p(is_near)
		robot->robot(blocked)
	}
	=>
	{
		p:person(0,-350)
		p2:person(170,-75)
		robot:robot(-140,10)
		p->p2(interacting)
		p2->p(interacting)
		robot->p(is_near)
	}
}

askForIndividualPermission : active(1)
{
	{
		p:person(-40,-50)
		robot:robot(-195,55)
		p->robot(front)
		p->robot(is_blocking)
		robot->p(is_near)
		robot->robot(blocked)
	}
	=>
	{
		p:person(10,-115)
		robot:robot(-140,10)
		p->robot(front)
		robot->p(is_near)
	}
	precondition
	{
		(forall 
			otherp:person
			(when   
				(not (= p otherp))
				(not (is_blocking otherp robot))
			)       
		)
	}
}

changeRoom : active(1)
{
	{
		robot:robot(-300,-190)
		room1:room(-210,-365)
		room2:room(-5,-205)
		robot->robot(blocked)*
		robot->room1(in)
		room1->room2(accessible)
		room2->room1(accessible)
	}
	=>
	{
		robot:robot(-155,-25)
		room1:room(-140,-205)
		room2:room(105,-30)
		robot->robot(blocked)*
		robot->room2(in)
		room1->room2(accessible)
		room2->room1(accessible)
	}
}

goToGroupOfPeople : active(1)
{
	{
		p:person(-235,-35)
		p2:person(25,105)
		robot:robot(-35,-180)
		p->p2(interacting)
		p->robot(is_blocking)
		p2->p(interacting)
		p2->robot(is_blocking)
	}
	=>
	{
		p:person(-275,-40)
		p2:person(-30,30)
		robot:robot(0,-205)
		p->p2(interacting)
		p->robot(is_blocking)
		p2->p(interacting)
		p2->robot(is_blocking)
		robot->p(is_near)
	}
}

goToPerson : active(1)
{
	{
		p:person(-235,-35)
		robot:robot(-35,-180)
		p->robot(is_blocking)
	}
	=>
	{
		p:person(-225,-80)
		robot:robot(0,-205)
		p->robot(is_blocking)
		robot->p(is_near)
	}
	precondition
	{
		(forall 
			otherp:person
			(when   
				(not (= p otherp))
				(not (is_blocking otherp robot))
			)       
		)
	}
}

takeTheAttention : active(1)
{
	{
		p:person(-15,-25)
		robot:robot(-150,50)
		robot->p(is_near)
	}
	=>
	{
		p:person(75,0)
		robot:robot(-105,90)
		p->robot(front)
		robot->p(is_near)
	}
}

